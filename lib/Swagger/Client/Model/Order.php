<?php
/**
 * Order
 *
 * PHP version 5
 *
 * @category Class
 * @package  InventoryClient
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * InventoryAPI
 *
 * Orkiv Inventory API client
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Order Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     InventoryClient
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Order implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Order';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'order_id' => 'string',
        'info_email' => 'string',
        'info_first' => 'string',
        'info_last' => 'string',
        'phone' => 'string',
        'shipset' => 'bool',
        'info_adr1' => 'string',
        'info_adr2' => 'string',
        'info_cty' => 'string',
        'info_zip' => 'string',
        'state' => 'string',
        'info_sadr1' => 'string',
        'info_sadr2' => 'string',
        'info_scty' => 'string',
        'info_szip' => 'string',
        'sstate' => 'string',
        'tax_amount' => 'float',
        'shipping_amount' => 'float',
        'amount_total' => 'float',
        'item_i_ds' => 'string[]'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'order_id' => 'order_id',
        'info_email' => 'info_email',
        'info_first' => 'info_first',
        'info_last' => 'info_last',
        'phone' => 'phone',
        'shipset' => 'shipset',
        'info_adr1' => 'info_adr1',
        'info_adr2' => 'info_adr2',
        'info_cty' => 'info_cty',
        'info_zip' => 'info_zip',
        'state' => 'state',
        'info_sadr1' => 'info_sadr1',
        'info_sadr2' => 'info_sadr2',
        'info_scty' => 'info_scty',
        'info_szip' => 'info_szip',
        'sstate' => 'sstate',
        'tax_amount' => 'tax_amount',
        'shipping_amount' => 'shipping_amount',
        'amount_total' => 'amount_total',
        'item_i_ds' => 'itemIDs'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'order_id' => 'setOrderId',
        'info_email' => 'setInfoEmail',
        'info_first' => 'setInfoFirst',
        'info_last' => 'setInfoLast',
        'phone' => 'setPhone',
        'shipset' => 'setShipset',
        'info_adr1' => 'setInfoAdr1',
        'info_adr2' => 'setInfoAdr2',
        'info_cty' => 'setInfoCty',
        'info_zip' => 'setInfoZip',
        'state' => 'setState',
        'info_sadr1' => 'setInfoSadr1',
        'info_sadr2' => 'setInfoSadr2',
        'info_scty' => 'setInfoScty',
        'info_szip' => 'setInfoSzip',
        'sstate' => 'setSstate',
        'tax_amount' => 'setTaxAmount',
        'shipping_amount' => 'setShippingAmount',
        'amount_total' => 'setAmountTotal',
        'item_i_ds' => 'setItemIDs'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'order_id' => 'getOrderId',
        'info_email' => 'getInfoEmail',
        'info_first' => 'getInfoFirst',
        'info_last' => 'getInfoLast',
        'phone' => 'getPhone',
        'shipset' => 'getShipset',
        'info_adr1' => 'getInfoAdr1',
        'info_adr2' => 'getInfoAdr2',
        'info_cty' => 'getInfoCty',
        'info_zip' => 'getInfoZip',
        'state' => 'getState',
        'info_sadr1' => 'getInfoSadr1',
        'info_sadr2' => 'getInfoSadr2',
        'info_scty' => 'getInfoScty',
        'info_szip' => 'getInfoSzip',
        'sstate' => 'getSstate',
        'tax_amount' => 'getTaxAmount',
        'shipping_amount' => 'getShippingAmount',
        'amount_total' => 'getAmountTotal',
        'item_i_ds' => 'getItemIDs'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['order_id'] = isset($data['order_id']) ? $data['order_id'] : null;
        $this->container['info_email'] = isset($data['info_email']) ? $data['info_email'] : null;
        $this->container['info_first'] = isset($data['info_first']) ? $data['info_first'] : null;
        $this->container['info_last'] = isset($data['info_last']) ? $data['info_last'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['shipset'] = isset($data['shipset']) ? $data['shipset'] : null;
        $this->container['info_adr1'] = isset($data['info_adr1']) ? $data['info_adr1'] : null;
        $this->container['info_adr2'] = isset($data['info_adr2']) ? $data['info_adr2'] : null;
        $this->container['info_cty'] = isset($data['info_cty']) ? $data['info_cty'] : null;
        $this->container['info_zip'] = isset($data['info_zip']) ? $data['info_zip'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['info_sadr1'] = isset($data['info_sadr1']) ? $data['info_sadr1'] : null;
        $this->container['info_sadr2'] = isset($data['info_sadr2']) ? $data['info_sadr2'] : null;
        $this->container['info_scty'] = isset($data['info_scty']) ? $data['info_scty'] : null;
        $this->container['info_szip'] = isset($data['info_szip']) ? $data['info_szip'] : null;
        $this->container['sstate'] = isset($data['sstate']) ? $data['sstate'] : null;
        $this->container['tax_amount'] = isset($data['tax_amount']) ? $data['tax_amount'] : null;
        $this->container['shipping_amount'] = isset($data['shipping_amount']) ? $data['shipping_amount'] : null;
        $this->container['amount_total'] = isset($data['amount_total']) ? $data['amount_total'] : null;
        $this->container['item_i_ds'] = isset($data['item_i_ds']) ? $data['item_i_ds'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets order_id
     * @return string
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     * @param string $order_id Order ID
     * @return $this
     */
    public function setOrderId($order_id)
    {
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets info_email
     * @return string
     */
    public function getInfoEmail()
    {
        return $this->container['info_email'];
    }

    /**
     * Sets info_email
     * @param string $info_email Customer email
     * @return $this
     */
    public function setInfoEmail($info_email)
    {
        $this->container['info_email'] = $info_email;

        return $this;
    }

    /**
     * Gets info_first
     * @return string
     */
    public function getInfoFirst()
    {
        return $this->container['info_first'];
    }

    /**
     * Sets info_first
     * @param string $info_first Customer first name
     * @return $this
     */
    public function setInfoFirst($info_first)
    {
        $this->container['info_first'] = $info_first;

        return $this;
    }

    /**
     * Gets info_last
     * @return string
     */
    public function getInfoLast()
    {
        return $this->container['info_last'];
    }

    /**
     * Sets info_last
     * @param string $info_last Customer last name
     * @return $this
     */
    public function setInfoLast($info_last)
    {
        $this->container['info_last'] = $info_last;

        return $this;
    }

    /**
     * Gets phone
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     * @param string $phone Customer phone number
     * @return $this
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets shipset
     * @return bool
     */
    public function getShipset()
    {
        return $this->container['shipset'];
    }

    /**
     * Sets shipset
     * @param bool $shipset Customer billing address matches shipping address
     * @return $this
     */
    public function setShipset($shipset)
    {
        $this->container['shipset'] = $shipset;

        return $this;
    }

    /**
     * Gets info_adr1
     * @return string
     */
    public function getInfoAdr1()
    {
        return $this->container['info_adr1'];
    }

    /**
     * Sets info_adr1
     * @param string $info_adr1 Customer billing address line '1'
     * @return $this
     */
    public function setInfoAdr1($info_adr1)
    {
        $this->container['info_adr1'] = $info_adr1;

        return $this;
    }

    /**
     * Gets info_adr2
     * @return string
     */
    public function getInfoAdr2()
    {
        return $this->container['info_adr2'];
    }

    /**
     * Sets info_adr2
     * @param string $info_adr2 Customer billing address line '2'
     * @return $this
     */
    public function setInfoAdr2($info_adr2)
    {
        $this->container['info_adr2'] = $info_adr2;

        return $this;
    }

    /**
     * Gets info_cty
     * @return string
     */
    public function getInfoCty()
    {
        return $this->container['info_cty'];
    }

    /**
     * Sets info_cty
     * @param string $info_cty Customer billing city
     * @return $this
     */
    public function setInfoCty($info_cty)
    {
        $this->container['info_cty'] = $info_cty;

        return $this;
    }

    /**
     * Gets info_zip
     * @return string
     */
    public function getInfoZip()
    {
        return $this->container['info_zip'];
    }

    /**
     * Sets info_zip
     * @param string $info_zip Customer billing zip code
     * @return $this
     */
    public function setInfoZip($info_zip)
    {
        $this->container['info_zip'] = $info_zip;

        return $this;
    }

    /**
     * Gets state
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     * @param string $state Customer billing state
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets info_sadr1
     * @return string
     */
    public function getInfoSadr1()
    {
        return $this->container['info_sadr1'];
    }

    /**
     * Sets info_sadr1
     * @param string $info_sadr1 Customer shipping address line '1'
     * @return $this
     */
    public function setInfoSadr1($info_sadr1)
    {
        $this->container['info_sadr1'] = $info_sadr1;

        return $this;
    }

    /**
     * Gets info_sadr2
     * @return string
     */
    public function getInfoSadr2()
    {
        return $this->container['info_sadr2'];
    }

    /**
     * Sets info_sadr2
     * @param string $info_sadr2 Customer shipping address line '2'
     * @return $this
     */
    public function setInfoSadr2($info_sadr2)
    {
        $this->container['info_sadr2'] = $info_sadr2;

        return $this;
    }

    /**
     * Gets info_scty
     * @return string
     */
    public function getInfoScty()
    {
        return $this->container['info_scty'];
    }

    /**
     * Sets info_scty
     * @param string $info_scty Customer shipping city
     * @return $this
     */
    public function setInfoScty($info_scty)
    {
        $this->container['info_scty'] = $info_scty;

        return $this;
    }

    /**
     * Gets info_szip
     * @return string
     */
    public function getInfoSzip()
    {
        return $this->container['info_szip'];
    }

    /**
     * Sets info_szip
     * @param string $info_szip Customer shipping zip code
     * @return $this
     */
    public function setInfoSzip($info_szip)
    {
        $this->container['info_szip'] = $info_szip;

        return $this;
    }

    /**
     * Gets sstate
     * @return string
     */
    public function getSstate()
    {
        return $this->container['sstate'];
    }

    /**
     * Sets sstate
     * @param string $sstate Customer shipping state
     * @return $this
     */
    public function setSstate($sstate)
    {
        $this->container['sstate'] = $sstate;

        return $this;
    }

    /**
     * Gets tax_amount
     * @return float
     */
    public function getTaxAmount()
    {
        return $this->container['tax_amount'];
    }

    /**
     * Sets tax_amount
     * @param float $tax_amount Tax amount in hundreds. Must divide by '100' for USD value
     * @return $this
     */
    public function setTaxAmount($tax_amount)
    {
        $this->container['tax_amount'] = $tax_amount;

        return $this;
    }

    /**
     * Gets shipping_amount
     * @return float
     */
    public function getShippingAmount()
    {
        return $this->container['shipping_amount'];
    }

    /**
     * Sets shipping_amount
     * @param float $shipping_amount Shipping total in USD
     * @return $this
     */
    public function setShippingAmount($shipping_amount)
    {
        $this->container['shipping_amount'] = $shipping_amount;

        return $this;
    }

    /**
     * Gets amount_total
     * @return float
     */
    public function getAmountTotal()
    {
        return $this->container['amount_total'];
    }

    /**
     * Sets amount_total
     * @param float $amount_total Checkout total in USD
     * @return $this
     */
    public function setAmountTotal($amount_total)
    {
        $this->container['amount_total'] = $amount_total;

        return $this;
    }

    /**
     * Gets item_i_ds
     * @return string[]
     */
    public function getItemIDs()
    {
        return $this->container['item_i_ds'];
    }

    /**
     * Sets item_i_ds
     * @param string[] $item_i_ds Array of items purchased at checkout
     * @return $this
     */
    public function setItemIDs($item_i_ds)
    {
        $this->container['item_i_ds'] = $item_i_ds;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\InventoryClient\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\InventoryClient\ObjectSerializer::sanitizeForSerialization($this));
    }
}


