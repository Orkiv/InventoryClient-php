<?php
/**
 * DefaultApi
 * PHP version 5
 *
 * @category Class
 * @package  InventoryClient
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * InventoryAPI
 *
 * Orkiv Inventory API client
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace InventoryClient\Api;

use \InventoryClient\Configuration;
use \InventoryClient\ApiClient;
use \InventoryClient\ApiException;
use \InventoryClient\ObjectSerializer;

/**
 * DefaultApi Class Doc Comment
 *
 * @category Class
 * @package  InventoryClient
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DefaultApi
{

    /**
     * API Client
     *
     * @var \InventoryClient\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \InventoryClient\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\InventoryClient\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://www.orkiv.com/i/api');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \InventoryClient\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \InventoryClient\ApiClient $apiClient set the API client
     *
     * @return DefaultApi
     */
    public function setApiClient(\InventoryClient\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation allGet
     *
     * 
     *
     * @return \InventoryClient\Model\InventoryGroup[]
     * @throws \InventoryClient\ApiException on non-2xx response
     */
    public function allGet()
    {
        list($response) = $this->allGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation allGetWithHttpInfo
     *
     * 
     *
     * @return Array of \InventoryClient\Model\InventoryGroup[], HTTP status code, HTTP response headers (array of strings)
     * @throws \InventoryClient\ApiException on non-2xx response
     */
    public function allGetWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/all/";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('APIKey');
        if (strlen($apiKey) !== 0) {
            $headerParams['APIKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('accountid');
        if (strlen($apiKey) !== 0) {
            $headerParams['accountid'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\InventoryClient\Model\InventoryGroup[]',
                '/all/'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\InventoryClient\Model\InventoryGroup[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\InventoryClient\Model\InventoryGroup[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\InventoryClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation categoriesDelete
     *
     * 
     *
     * @param string $id Id of category to remove (required)
     * @return \InventoryClient\Model\Response
     * @throws \InventoryClient\ApiException on non-2xx response
     */
    public function categoriesDelete($id)
    {
        list($response) = $this->categoriesDeleteWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation categoriesDeleteWithHttpInfo
     *
     * 
     *
     * @param string $id Id of category to remove (required)
     * @return Array of \InventoryClient\Model\Response, HTTP status code, HTTP response headers (array of strings)
     * @throws \InventoryClient\ApiException on non-2xx response
     */
    public function categoriesDeleteWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling categoriesDelete');
        }
        // parse inputs
        $resourcePath = "/categories/";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($id !== null) {
            $queryParams['id'] = $this->apiClient->getSerializer()->toQueryValue($id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('APIKey');
        if (strlen($apiKey) !== 0) {
            $headerParams['APIKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('accountid');
        if (strlen($apiKey) !== 0) {
            $headerParams['accountid'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\InventoryClient\Model\Response',
                '/categories/'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\InventoryClient\Model\Response', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\InventoryClient\Model\Response', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\InventoryClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation categoriesPost
     *
     * 
     *
     * @param \InventoryClient\Model\Dictionary $query Category to query against system (optional)
     * @return \InventoryClient\Model\Category[]
     * @throws \InventoryClient\ApiException on non-2xx response
     */
    public function categoriesPost($query = null)
    {
        list($response) = $this->categoriesPostWithHttpInfo($query);
        return $response;
    }

    /**
     * Operation categoriesPostWithHttpInfo
     *
     * 
     *
     * @param \InventoryClient\Model\Dictionary $query Category to query against system (optional)
     * @return Array of \InventoryClient\Model\Category[], HTTP status code, HTTP response headers (array of strings)
     * @throws \InventoryClient\ApiException on non-2xx response
     */
    public function categoriesPostWithHttpInfo($query = null)
    {
        // parse inputs
        $resourcePath = "/categories/";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($query)) {
            $_tempBody = $query;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('APIKey');
        if (strlen($apiKey) !== 0) {
            $headerParams['APIKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('accountid');
        if (strlen($apiKey) !== 0) {
            $headerParams['accountid'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\InventoryClient\Model\Category[]',
                '/categories/'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\InventoryClient\Model\Category[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\InventoryClient\Model\Category[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\InventoryClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation categoriesPut
     *
     * 
     *
     * @param string $id category id to update. (required)
     * @param \InventoryClient\Model\Category $category New category information. (required)
     * @return \InventoryClient\Model\Category
     * @throws \InventoryClient\ApiException on non-2xx response
     */
    public function categoriesPut($id, $category)
    {
        list($response) = $this->categoriesPutWithHttpInfo($id, $category);
        return $response;
    }

    /**
     * Operation categoriesPutWithHttpInfo
     *
     * 
     *
     * @param string $id category id to update. (required)
     * @param \InventoryClient\Model\Category $category New category information. (required)
     * @return Array of \InventoryClient\Model\Category, HTTP status code, HTTP response headers (array of strings)
     * @throws \InventoryClient\ApiException on non-2xx response
     */
    public function categoriesPutWithHttpInfo($id, $category)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling categoriesPut');
        }
        // verify the required parameter 'category' is set
        if ($category === null) {
            throw new \InvalidArgumentException('Missing the required parameter $category when calling categoriesPut');
        }
        // parse inputs
        $resourcePath = "/categories/";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($id !== null) {
            $queryParams['id'] = $this->apiClient->getSerializer()->toQueryValue($id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($category)) {
            $_tempBody = $category;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('APIKey');
        if (strlen($apiKey) !== 0) {
            $headerParams['APIKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('accountid');
        if (strlen($apiKey) !== 0) {
            $headerParams['accountid'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\InventoryClient\Model\Category',
                '/categories/'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\InventoryClient\Model\Category', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\InventoryClient\Model\Category', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\InventoryClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation itemAddPost
     *
     * 
     *
     * @param \InventoryClient\Model\Item $item Item to create. (required)
     * @return \InventoryClient\Model\Item
     * @throws \InventoryClient\ApiException on non-2xx response
     */
    public function itemAddPost($item)
    {
        list($response) = $this->itemAddPostWithHttpInfo($item);
        return $response;
    }

    /**
     * Operation itemAddPostWithHttpInfo
     *
     * 
     *
     * @param \InventoryClient\Model\Item $item Item to create. (required)
     * @return Array of \InventoryClient\Model\Item, HTTP status code, HTTP response headers (array of strings)
     * @throws \InventoryClient\ApiException on non-2xx response
     */
    public function itemAddPostWithHttpInfo($item)
    {
        // verify the required parameter 'item' is set
        if ($item === null) {
            throw new \InvalidArgumentException('Missing the required parameter $item when calling itemAddPost');
        }
        // parse inputs
        $resourcePath = "/item/add/";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($item)) {
            $_tempBody = $item;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('APIKey');
        if (strlen($apiKey) !== 0) {
            $headerParams['APIKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('accountid');
        if (strlen($apiKey) !== 0) {
            $headerParams['accountid'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\InventoryClient\Model\Item',
                '/item/add/'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\InventoryClient\Model\Item', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\InventoryClient\Model\Item', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\InventoryClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation itemAddbulkPost
     *
     * 
     *
     * @param \InventoryClient\Model\Item[] $items Items to create. (required)
     * @return \InventoryClient\Model\Response
     * @throws \InventoryClient\ApiException on non-2xx response
     */
    public function itemAddbulkPost($items)
    {
        list($response) = $this->itemAddbulkPostWithHttpInfo($items);
        return $response;
    }

    /**
     * Operation itemAddbulkPostWithHttpInfo
     *
     * 
     *
     * @param \InventoryClient\Model\Item[] $items Items to create. (required)
     * @return Array of \InventoryClient\Model\Response, HTTP status code, HTTP response headers (array of strings)
     * @throws \InventoryClient\ApiException on non-2xx response
     */
    public function itemAddbulkPostWithHttpInfo($items)
    {
        // verify the required parameter 'items' is set
        if ($items === null) {
            throw new \InvalidArgumentException('Missing the required parameter $items when calling itemAddbulkPost');
        }
        // parse inputs
        $resourcePath = "/item/addbulk/";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($items)) {
            $_tempBody = $items;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('APIKey');
        if (strlen($apiKey) !== 0) {
            $headerParams['APIKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('accountid');
        if (strlen($apiKey) !== 0) {
            $headerParams['accountid'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\InventoryClient\Model\Response',
                '/item/addbulk/'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\InventoryClient\Model\Response', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\InventoryClient\Model\Response', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\InventoryClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation itemDelete
     *
     * 
     *
     * @param string $id item id to remove (required)
     * @return \InventoryClient\Model\Response
     * @throws \InventoryClient\ApiException on non-2xx response
     */
    public function itemDelete($id)
    {
        list($response) = $this->itemDeleteWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation itemDeleteWithHttpInfo
     *
     * 
     *
     * @param string $id item id to remove (required)
     * @return Array of \InventoryClient\Model\Response, HTTP status code, HTTP response headers (array of strings)
     * @throws \InventoryClient\ApiException on non-2xx response
     */
    public function itemDeleteWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling itemDelete');
        }
        // parse inputs
        $resourcePath = "/item/";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($id !== null) {
            $queryParams['id'] = $this->apiClient->getSerializer()->toQueryValue($id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('APIKey');
        if (strlen($apiKey) !== 0) {
            $headerParams['APIKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('accountid');
        if (strlen($apiKey) !== 0) {
            $headerParams['accountid'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\InventoryClient\Model\Response',
                '/item/'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\InventoryClient\Model\Response', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\InventoryClient\Model\Response', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\InventoryClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation itemPut
     *
     * 
     *
     * @param string $id item id to update. (required)
     * @param \InventoryClient\Model\Dictionary $item New item information. (required)
     * @return \InventoryClient\Model\Response
     * @throws \InventoryClient\ApiException on non-2xx response
     */
    public function itemPut($id, $item)
    {
        list($response) = $this->itemPutWithHttpInfo($id, $item);
        return $response;
    }

    /**
     * Operation itemPutWithHttpInfo
     *
     * 
     *
     * @param string $id item id to update. (required)
     * @param \InventoryClient\Model\Dictionary $item New item information. (required)
     * @return Array of \InventoryClient\Model\Response, HTTP status code, HTTP response headers (array of strings)
     * @throws \InventoryClient\ApiException on non-2xx response
     */
    public function itemPutWithHttpInfo($id, $item)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling itemPut');
        }
        // verify the required parameter 'item' is set
        if ($item === null) {
            throw new \InvalidArgumentException('Missing the required parameter $item when calling itemPut');
        }
        // parse inputs
        $resourcePath = "/item/";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($id !== null) {
            $queryParams['id'] = $this->apiClient->getSerializer()->toQueryValue($id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($item)) {
            $_tempBody = $item;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('APIKey');
        if (strlen($apiKey) !== 0) {
            $headerParams['APIKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('accountid');
        if (strlen($apiKey) !== 0) {
            $headerParams['accountid'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\InventoryClient\Model\Response',
                '/item/'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\InventoryClient\Model\Response', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\InventoryClient\Model\Response', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\InventoryClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation itemsCountPost
     *
     * 
     *
     * @param \InventoryClient\Model\Dictionary $query Item to query against system. (optional)
     * @return float
     * @throws \InventoryClient\ApiException on non-2xx response
     */
    public function itemsCountPost($query = null)
    {
        list($response) = $this->itemsCountPostWithHttpInfo($query);
        return $response;
    }

    /**
     * Operation itemsCountPostWithHttpInfo
     *
     * 
     *
     * @param \InventoryClient\Model\Dictionary $query Item to query against system. (optional)
     * @return Array of float, HTTP status code, HTTP response headers (array of strings)
     * @throws \InventoryClient\ApiException on non-2xx response
     */
    public function itemsCountPostWithHttpInfo($query = null)
    {
        // parse inputs
        $resourcePath = "/items/count/";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($query)) {
            $_tempBody = $query;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('APIKey');
        if (strlen($apiKey) !== 0) {
            $headerParams['APIKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('accountid');
        if (strlen($apiKey) !== 0) {
            $headerParams['accountid'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'float',
                '/items/count/'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'float', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'float', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\InventoryClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation itemsPost
     *
     * 
     *
     * @param \InventoryClient\Model\Dictionary $query Item to query against system. (optional)
     * @return \InventoryClient\Model\Item[]
     * @throws \InventoryClient\ApiException on non-2xx response
     */
    public function itemsPost($query = null)
    {
        list($response) = $this->itemsPostWithHttpInfo($query);
        return $response;
    }

    /**
     * Operation itemsPostWithHttpInfo
     *
     * 
     *
     * @param \InventoryClient\Model\Dictionary $query Item to query against system. (optional)
     * @return Array of \InventoryClient\Model\Item[], HTTP status code, HTTP response headers (array of strings)
     * @throws \InventoryClient\ApiException on non-2xx response
     */
    public function itemsPostWithHttpInfo($query = null)
    {
        // parse inputs
        $resourcePath = "/items/";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($query)) {
            $_tempBody = $query;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('APIKey');
        if (strlen($apiKey) !== 0) {
            $headerParams['APIKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('accountid');
        if (strlen($apiKey) !== 0) {
            $headerParams['accountid'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\InventoryClient\Model\Item[]',
                '/items/'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\InventoryClient\Model\Item[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\InventoryClient\Model\Item[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\InventoryClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation itemsallfieldsPost
     *
     * 
     *
     * @param \InventoryClient\Model\Dictionary $query Item to query against system. (optional)
     * @return \InventoryClient\Model\Dictionary[]
     * @throws \InventoryClient\ApiException on non-2xx response
     */
    public function itemsallfieldsPost($query = null)
    {
        list($response) = $this->itemsallfieldsPostWithHttpInfo($query);
        return $response;
    }

    /**
     * Operation itemsallfieldsPostWithHttpInfo
     *
     * 
     *
     * @param \InventoryClient\Model\Dictionary $query Item to query against system. (optional)
     * @return Array of \InventoryClient\Model\Dictionary[], HTTP status code, HTTP response headers (array of strings)
     * @throws \InventoryClient\ApiException on non-2xx response
     */
    public function itemsallfieldsPostWithHttpInfo($query = null)
    {
        // parse inputs
        $resourcePath = "/items/?allfields";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($query)) {
            $_tempBody = $query;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('APIKey');
        if (strlen($apiKey) !== 0) {
            $headerParams['APIKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('accountid');
        if (strlen($apiKey) !== 0) {
            $headerParams['accountid'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\InventoryClient\Model\Dictionary[]',
                '/items/?allfields'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\InventoryClient\Model\Dictionary[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\InventoryClient\Model\Dictionary[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\InventoryClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation ordersPost
     *
     * 
     *
     * @param \InventoryClient\Model\Dictionary $query Order to query against system. (optional)
     * @return \InventoryClient\Model\Order[]
     * @throws \InventoryClient\ApiException on non-2xx response
     */
    public function ordersPost($query = null)
    {
        list($response) = $this->ordersPostWithHttpInfo($query);
        return $response;
    }

    /**
     * Operation ordersPostWithHttpInfo
     *
     * 
     *
     * @param \InventoryClient\Model\Dictionary $query Order to query against system. (optional)
     * @return Array of \InventoryClient\Model\Order[], HTTP status code, HTTP response headers (array of strings)
     * @throws \InventoryClient\ApiException on non-2xx response
     */
    public function ordersPostWithHttpInfo($query = null)
    {
        // parse inputs
        $resourcePath = "/orders/";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($query)) {
            $_tempBody = $query;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('APIKey');
        if (strlen($apiKey) !== 0) {
            $headerParams['APIKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('accountid');
        if (strlen($apiKey) !== 0) {
            $headerParams['accountid'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\InventoryClient\Model\Order[]',
                '/orders/'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\InventoryClient\Model\Order[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\InventoryClient\Model\Order[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\InventoryClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation queryPost
     *
     * 
     *
     * @param float $page Current page index. (optional)
     * @param string $categoryid Get items under specified category id. (optional)
     * @param string $sort Comma delimited Sort string. ie ; +ordprice. Please use number based fields only (optional)
     * @param string $search Performs a regex pattern match against the items within your account (optional)
     * @param float $minprice Min price in hundreds. (optional)
     * @param float $maxprice Max price in hudreds. (optional)
     * @param \InventoryClient\Model\Dictionary $query Custom parameters to query against system. (optional)
     * @return \InventoryClient\Model\Item[]
     * @throws \InventoryClient\ApiException on non-2xx response
     */
    public function queryPost($page = null, $categoryid = null, $sort = null, $search = null, $minprice = null, $maxprice = null, $query = null)
    {
        list($response) = $this->queryPostWithHttpInfo($page, $categoryid, $sort, $search, $minprice, $maxprice, $query);
        return $response;
    }

    /**
     * Operation queryPostWithHttpInfo
     *
     * 
     *
     * @param float $page Current page index. (optional)
     * @param string $categoryid Get items under specified category id. (optional)
     * @param string $sort Comma delimited Sort string. ie ; +ordprice. Please use number based fields only (optional)
     * @param string $search Performs a regex pattern match against the items within your account (optional)
     * @param float $minprice Min price in hundreds. (optional)
     * @param float $maxprice Max price in hudreds. (optional)
     * @param \InventoryClient\Model\Dictionary $query Custom parameters to query against system. (optional)
     * @return Array of \InventoryClient\Model\Item[], HTTP status code, HTTP response headers (array of strings)
     * @throws \InventoryClient\ApiException on non-2xx response
     */
    public function queryPostWithHttpInfo($page = null, $categoryid = null, $sort = null, $search = null, $minprice = null, $maxprice = null, $query = null)
    {
        // parse inputs
        $resourcePath = "/query/";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($categoryid !== null) {
            $queryParams['categoryid'] = $this->apiClient->getSerializer()->toQueryValue($categoryid);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }
        // query params
        if ($search !== null) {
            $queryParams['search'] = $this->apiClient->getSerializer()->toQueryValue($search);
        }
        // query params
        if ($minprice !== null) {
            $queryParams['minprice'] = $this->apiClient->getSerializer()->toQueryValue($minprice);
        }
        // query params
        if ($maxprice !== null) {
            $queryParams['maxprice'] = $this->apiClient->getSerializer()->toQueryValue($maxprice);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($query)) {
            $_tempBody = $query;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('APIKey');
        if (strlen($apiKey) !== 0) {
            $headerParams['APIKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('accountid');
        if (strlen($apiKey) !== 0) {
            $headerParams['accountid'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\InventoryClient\Model\Item[]',
                '/query/'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\InventoryClient\Model\Item[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\InventoryClient\Model\Item[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\InventoryClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation queryallfieldsPost
     *
     * 
     *
     * @param float $page Current page index. (optional)
     * @param string $categoryid Get items under specified category id. (optional)
     * @param string $sort Comma delimited Sort string. ie ; +ordprice. Please use number based fields only (optional)
     * @param string $search Performs a regex pattern match against the items within your account (optional)
     * @param float $minprice Min price in hundreds. (optional)
     * @param float $maxprice Max price in hudreds. (optional)
     * @param \InventoryClient\Model\Dictionary $query Custom parameters to query against system. (optional)
     * @return \InventoryClient\Model\Dictionary[]
     * @throws \InventoryClient\ApiException on non-2xx response
     */
    public function queryallfieldsPost($page = null, $categoryid = null, $sort = null, $search = null, $minprice = null, $maxprice = null, $query = null)
    {
        list($response) = $this->queryallfieldsPostWithHttpInfo($page, $categoryid, $sort, $search, $minprice, $maxprice, $query);
        return $response;
    }

    /**
     * Operation queryallfieldsPostWithHttpInfo
     *
     * 
     *
     * @param float $page Current page index. (optional)
     * @param string $categoryid Get items under specified category id. (optional)
     * @param string $sort Comma delimited Sort string. ie ; +ordprice. Please use number based fields only (optional)
     * @param string $search Performs a regex pattern match against the items within your account (optional)
     * @param float $minprice Min price in hundreds. (optional)
     * @param float $maxprice Max price in hudreds. (optional)
     * @param \InventoryClient\Model\Dictionary $query Custom parameters to query against system. (optional)
     * @return Array of \InventoryClient\Model\Dictionary[], HTTP status code, HTTP response headers (array of strings)
     * @throws \InventoryClient\ApiException on non-2xx response
     */
    public function queryallfieldsPostWithHttpInfo($page = null, $categoryid = null, $sort = null, $search = null, $minprice = null, $maxprice = null, $query = null)
    {
        // parse inputs
        $resourcePath = "/query/?allfields";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($categoryid !== null) {
            $queryParams['categoryid'] = $this->apiClient->getSerializer()->toQueryValue($categoryid);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }
        // query params
        if ($search !== null) {
            $queryParams['search'] = $this->apiClient->getSerializer()->toQueryValue($search);
        }
        // query params
        if ($minprice !== null) {
            $queryParams['minprice'] = $this->apiClient->getSerializer()->toQueryValue($minprice);
        }
        // query params
        if ($maxprice !== null) {
            $queryParams['maxprice'] = $this->apiClient->getSerializer()->toQueryValue($maxprice);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($query)) {
            $_tempBody = $query;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('APIKey');
        if (strlen($apiKey) !== 0) {
            $headerParams['APIKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('accountid');
        if (strlen($apiKey) !== 0) {
            $headerParams['accountid'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\InventoryClient\Model\Dictionary[]',
                '/query/?allfields'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\InventoryClient\Model\Dictionary[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\InventoryClient\Model\Dictionary[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\InventoryClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation servicesDelete
     *
     * 
     *
     * @param string $id ID of the service to update (required)
     * @return \InventoryClient\Model\Response
     * @throws \InventoryClient\ApiException on non-2xx response
     */
    public function servicesDelete($id)
    {
        list($response) = $this->servicesDeleteWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation servicesDeleteWithHttpInfo
     *
     * 
     *
     * @param string $id ID of the service to update (required)
     * @return Array of \InventoryClient\Model\Response, HTTP status code, HTTP response headers (array of strings)
     * @throws \InventoryClient\ApiException on non-2xx response
     */
    public function servicesDeleteWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling servicesDelete');
        }
        // parse inputs
        $resourcePath = "/services/";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($id !== null) {
            $queryParams['id'] = $this->apiClient->getSerializer()->toQueryValue($id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('APIKey');
        if (strlen($apiKey) !== 0) {
            $headerParams['APIKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('accountid');
        if (strlen($apiKey) !== 0) {
            $headerParams['accountid'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\InventoryClient\Model\Response',
                '/services/'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\InventoryClient\Model\Response', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\InventoryClient\Model\Response', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\InventoryClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation servicesGet
     *
     * 
     *
     * @return \InventoryClient\Model\Service[]
     * @throws \InventoryClient\ApiException on non-2xx response
     */
    public function servicesGet()
    {
        list($response) = $this->servicesGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation servicesGetWithHttpInfo
     *
     * 
     *
     * @return Array of \InventoryClient\Model\Service[], HTTP status code, HTTP response headers (array of strings)
     * @throws \InventoryClient\ApiException on non-2xx response
     */
    public function servicesGetWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/services/";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('APIKey');
        if (strlen($apiKey) !== 0) {
            $headerParams['APIKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('accountid');
        if (strlen($apiKey) !== 0) {
            $headerParams['accountid'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\InventoryClient\Model\Service[]',
                '/services/'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\InventoryClient\Model\Service[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\InventoryClient\Model\Service[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\InventoryClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation servicesPost
     *
     * 
     *
     * @param \InventoryClient\Model\Service $service Service to create. (required)
     * @return \InventoryClient\Model\Service
     * @throws \InventoryClient\ApiException on non-2xx response
     */
    public function servicesPost($service)
    {
        list($response) = $this->servicesPostWithHttpInfo($service);
        return $response;
    }

    /**
     * Operation servicesPostWithHttpInfo
     *
     * 
     *
     * @param \InventoryClient\Model\Service $service Service to create. (required)
     * @return Array of \InventoryClient\Model\Service, HTTP status code, HTTP response headers (array of strings)
     * @throws \InventoryClient\ApiException on non-2xx response
     */
    public function servicesPostWithHttpInfo($service)
    {
        // verify the required parameter 'service' is set
        if ($service === null) {
            throw new \InvalidArgumentException('Missing the required parameter $service when calling servicesPost');
        }
        // parse inputs
        $resourcePath = "/services/";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($service)) {
            $_tempBody = $service;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('APIKey');
        if (strlen($apiKey) !== 0) {
            $headerParams['APIKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('accountid');
        if (strlen($apiKey) !== 0) {
            $headerParams['accountid'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\InventoryClient\Model\Service',
                '/services/'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\InventoryClient\Model\Service', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\InventoryClient\Model\Service', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\InventoryClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation servicesPut
     *
     * 
     *
     * @param string $id ID of the service to update (required)
     * @param \InventoryClient\Model\Service $service New service data to set. (required)
     * @return \InventoryClient\Model\Response
     * @throws \InventoryClient\ApiException on non-2xx response
     */
    public function servicesPut($id, $service)
    {
        list($response) = $this->servicesPutWithHttpInfo($id, $service);
        return $response;
    }

    /**
     * Operation servicesPutWithHttpInfo
     *
     * 
     *
     * @param string $id ID of the service to update (required)
     * @param \InventoryClient\Model\Service $service New service data to set. (required)
     * @return Array of \InventoryClient\Model\Response, HTTP status code, HTTP response headers (array of strings)
     * @throws \InventoryClient\ApiException on non-2xx response
     */
    public function servicesPutWithHttpInfo($id, $service)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling servicesPut');
        }
        // verify the required parameter 'service' is set
        if ($service === null) {
            throw new \InvalidArgumentException('Missing the required parameter $service when calling servicesPut');
        }
        // parse inputs
        $resourcePath = "/services/";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($id !== null) {
            $queryParams['id'] = $this->apiClient->getSerializer()->toQueryValue($id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($service)) {
            $_tempBody = $service;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('APIKey');
        if (strlen($apiKey) !== 0) {
            $headerParams['APIKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('accountid');
        if (strlen($apiKey) !== 0) {
            $headerParams['accountid'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\InventoryClient\Model\Response',
                '/services/'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\InventoryClient\Model\Response', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\InventoryClient\Model\Response', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\InventoryClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation writeDelete
     *
     * 
     *
     * @param string $id Will delete event attached to this serviceid (optional)
     * @return \InventoryClient\Model\Response
     * @throws \InventoryClient\ApiException on non-2xx response
     */
    public function writeDelete($id = null)
    {
        list($response) = $this->writeDeleteWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation writeDeleteWithHttpInfo
     *
     * 
     *
     * @param string $id Will delete event attached to this serviceid (optional)
     * @return Array of \InventoryClient\Model\Response, HTTP status code, HTTP response headers (array of strings)
     * @throws \InventoryClient\ApiException on non-2xx response
     */
    public function writeDeleteWithHttpInfo($id = null)
    {
        // parse inputs
        $resourcePath = "/write/";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($id !== null) {
            $queryParams['id'] = $this->apiClient->getSerializer()->toQueryValue($id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('APIKey');
        if (strlen($apiKey) !== 0) {
            $headerParams['APIKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('accountid');
        if (strlen($apiKey) !== 0) {
            $headerParams['accountid'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\InventoryClient\Model\Response',
                '/write/'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\InventoryClient\Model\Response', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\InventoryClient\Model\Response', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\InventoryClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation writePost
     *
     * 
     *
     * @param \InventoryClient\Model\EventRequest $event_request Event to upload (required)
     * @return \InventoryClient\Model\Response
     * @throws \InventoryClient\ApiException on non-2xx response
     */
    public function writePost($event_request)
    {
        list($response) = $this->writePostWithHttpInfo($event_request);
        return $response;
    }

    /**
     * Operation writePostWithHttpInfo
     *
     * 
     *
     * @param \InventoryClient\Model\EventRequest $event_request Event to upload (required)
     * @return Array of \InventoryClient\Model\Response, HTTP status code, HTTP response headers (array of strings)
     * @throws \InventoryClient\ApiException on non-2xx response
     */
    public function writePostWithHttpInfo($event_request)
    {
        // verify the required parameter 'event_request' is set
        if ($event_request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $event_request when calling writePost');
        }
        // parse inputs
        $resourcePath = "/write/";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($event_request)) {
            $_tempBody = $event_request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('APIKey');
        if (strlen($apiKey) !== 0) {
            $headerParams['APIKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('accountid');
        if (strlen($apiKey) !== 0) {
            $headerParams['accountid'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\InventoryClient\Model\Response',
                '/write/'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\InventoryClient\Model\Response', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\InventoryClient\Model\Response', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\InventoryClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
